# 由於我想讓這個 pipeline 只透過 demo-code 的 pipeline 來觸發, 所以必須使用 workflow.rules 關鍵字來設定觸發規則,
# 判斷 $CI_PIPELINE_SOURCE 必須為 "pipeline", 所以一般的 commit, push, merge request 事件將不會觸發此 pipeline.
# $CI_PIPELINE_SOURCE 為一個 Gitlab Predefined variables 可參考 https://docs.gitlab.com/ee/ci/variables/predefined_variables.html

# 並且再進一步限制 Trigger 需要是由專案 demo-code 觸發的才行, 由於從 Gitlab Predefined variables 找不到相關的變數,
# 所以在 Upperstream project 使用自訂義變數: $CV_UPPSTREAM_PRJ_NAME 並傳到 Downstream 來判斷.

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CV_UPPSTREAM_PRJ_NAME == "demo-code"

# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

variables:
  PRIVATE_NEXUS_URL: "sfcs-docker.mic.com.tw:8443"
  REPOSITORY_PATH: "helm-hosted-demo"
  HELM_REPOSITORY_NAME: "nexus-helm-hosted-demo"
  HELM_CHART_NAME: "demo-multi-pipe"

stages:
  - publish # 修改 helm chart 的內容後, 打包並上傳到 Nexus private repository.
  - deploy # deploy helm chart to k8s cluster.

# 由於我定義所有的 jobs 都要執行在同一台 host 上, 所以可以忽略掉不同 job 會被分配到不同 shell executor 上,
# 所造成擋案需要上傳/下載 到 artifacts 來跨 jobs 傳遞的問題.

default:
  tags: # 如果使用了多個 tags 那 gitlab runner 必須都具有這些 tags 才會將 job 指派給它.
    - shell # 預設每個 job 都使用 shell executor 執行 (gitlab runner 註冊時 tag 須加上 shell).
    - 10.88.26.238 # 指定這台 host 作 helm chart 發佈, 有一些前置配置需參考 [README-shell-executor.md](https://github.com/ShungYang/gitlab/blob/master/README-shell-executor.md).

edit-chart: # 用來修改 helm chart values.yaml, 現階段可以直接使用 upperstream 傳的 image tag 變數.
  stage: publish
  script:
    - echo "edit-chart..."
    # TO-DO: edit chart
    - echo "complete."

# 是以 gitlab-runner 這個 user 來運行 Helm CLI, 所以需要給 gitlab-runner 有 root 權限.
# $HELM_REPOSITORY_USER, $HELM_REPOSITORY_PASSWORD 使用 Settings > CI/CD > Variables 來定義,
# Protected (unchecked), Masked (unchecked).
# 注意 helm package 打包後的檔名會使用 {chart-name}-{version}.

publish-job:
  stage: publish
  needs: ["edit-chart"]
  script:
    - echo "publish-job..."
    - sudo helm repo add ${HELM_REPOSITORY_NAME} https://${PRIVATE_NEXUS_URL}/repository/${REPOSITORY_PATH}/ --force-update --username $HELM_REPOSITORY_USER --password $HELM_REPOSITORY_PASSWORD
    - helm package ./ --version=$CV_IMAGE_TAG
    - curl -u $HELM_REPOSITORY_USER:$HELM_REPOSITORY_PASSWORD https://${PRIVATE_NEXUS_URL}/repository/${REPOSITORY_PATH}/ --upload-file ${HELM_CHART_NAME}-$CV_IMAGE_TAG.tgz -v
    - echo "complete."

deploy-job: # 以 gitlab-runner 使用 helm CLI 時需指定路徑 --kubeconfig /home/osadmin/.kube/config
  stage: deploy
  script:
    - echo "deploy-job..."
    - sudo helm repo update
    - sudo helm upgrade ${HELM_CHART_NAME} ${HELM_REPOSITORY_NAME}/${HELM_CHART_NAME} --version $CV_IMAGE_TAG --install --debug --kubeconfig /home/osadmin/.kube/config
    - echo "Successfully deployed."
